"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import os
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode, CallbackQuery
from aiogram.utils.markdown import text, bold

from cropped_img import cropped_img
from my_logging import logger
from parser import pars_img
from messages import (
    download_sch_msg_1, download_sch_msg_2,
    schedule_img_msg_1, schedule_img_msg_2,
    start_msg_1, start_msg_2,
)
from keyboard import choice, profile_keyboard

API_TOKEN = os.getenv("NOMAD_BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""


@logger.catch
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    first_msg = text(bold("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è–Ω—á–∏–∫üß†, "
                          "–Ω–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É \n"
                          "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ"))
    await message.answer(first_msg, parse_mode=ParseMode.MARKDOWN,
                         reply_markup=choice)


@logger.catch
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É"""
    msg = f"{download_sch_msg_1} - {download_sch_msg_2} \n\n" \
          f"{schedule_img_msg_1} - {schedule_img_msg_2} \n\n" \
          f"{start_msg_1} - {start_msg_2} \n\n" \
          f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ ‚å®Ô∏è"

    await message.answer(msg, parse_mode=ParseMode.MARKDOWN,
                         reply_markup=choice)


@logger.catch
@dp.message_handler(commands=['download'])
async def parse_site(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /download
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é pars_img, –∫–æ—Ç–æ—Ä–∞—è –∫–∞—á–∞–µ—Ç
    —Ñ–æ—Ç–æ —Å —Å–∞–π—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–ø–∫–µ schedule
    """
    pars_img()
    cropped_img()
    msg = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ üëå \n" \
          "–ù–∞–ø–∏—à–∏ /photo –∏ —è –ø–µ—Ä–µ—à–ª—é —Ç–µ–±–µ –µ–≥–æ üì≤"
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN,
                         reply_markup=choice)


@logger.catch
@dp.message_handler(commands=['photo'])
async def photo_command(message: types.Message):
    """–û—Ç—Å—ã–ª–∞–µ—Ç —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        with open('schedule/schedule2.png', 'rb') as f:
            contents = f.read()
            await bot.send_photo(message.from_user.id, photo=contents)
            logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception:
        logger.error("no png file")
        msg_error = "–£–ø—Å.. –£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üò± \n" \
                    "–ù–∞–ø–∏—à–∏: /download –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ üíæ\n" \
                    "–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - –°–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïπ"
        await message.answer(msg_error, parse_mode=ParseMode.MARKDOWN)


"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""


# –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
@logger.catch
@dp.callback_query_handler(text="my_id")
async def user_id(call: CallbackQuery):
    msg_user = call.from_user.id
    msg = f"–í–∞—à ID:\n {msg_user}"
    await call.answer(msg, show_alert=True)


@logger.catch
@dp.callback_query_handler(text="my_username")
async def user_username(call: CallbackQuery):
    msg_user = call.from_user.username
    msg = f"–í–∞—à username:\n {msg_user}"
    await call.answer(msg, show_alert=True)


@logger.catch
@dp.callback_query_handler(text="first_name")
async def user_firstname(call: CallbackQuery):
    msg_user = call.from_user.first_name
    msg = f"–í–∞—à–µ –∏–º—è:\n {msg_user}"
    await call.answer(msg, show_alert=True)


@logger.catch
@dp.callback_query_handler(text="last_name")
async def user_lastname(call: CallbackQuery):
    msg_user = call.from_user.last_name
    msg = f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è:\n {msg_user}"
    await call.answer(msg, show_alert=True)


# -----------------------------------------------------

@logger.catch
@dp.callback_query_handler(text="home")
async def home_keyboard(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=choice)


@logger.catch
@dp.callback_query_handler(text="cancel")
async def cancel_buying(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback = cancel -
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    await call.answer("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", show_alert=False)
    await call.message.edit_reply_markup(reply_markup=None)


@logger.catch
@dp.callback_query_handler(text="schedule")
async def schedule_buying(call: CallbackQuery):
    try:
        # remove()
        os.remove('schedule/schedule.png')
        os.remove('schedule/schedule2.png')
        logger.info("–£–¥–∞–ª–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        time.sleep(2)
        pars_img()
        cropped_img()
        with open('schedule/schedule2.png', 'rb') as f:
            contents = f.read()
            await bot.send_photo(call.from_user.id, photo=contents)
    except Exception:
        logger.error("no png file")
        msg_error = "–£–ø—Å.. –£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üò±"
        await call.answer(msg_error, show_alert=True)


@logger.catch
@dp.callback_query_handler(text="profile")
async def profile_user(call: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await call.message.edit_reply_markup(reply_markup=profile_keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
