"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import os
import db_users_isp

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode, CallbackQuery
from aiogram.utils.markdown import text, bold

from cropped_img import cropped_img
from my_logging import logger
from parser import pars_img
from messages import (
    download_sch_msg_1, download_sch_msg_2,
    schedule_img_msg_1, schedule_img_msg_2,
    start_msg_1, start_msg_2,
    info_developer_msg_1, info_developer_msg_2,
)
from keyboard import choice



API_TOKEN = os.getenv("NOMAD_BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@logger.catch
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    first_msg = text(bold("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è–Ω—á–∏–∫üß†, "
                          "–Ω–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É \n"
                          "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ"))
    await message.answer(first_msg, parse_mode=ParseMode.MARKDOWN,
                         reply_markup=choice)


@logger.catch
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É"""

    msg = f"{download_sch_msg_1} - {download_sch_msg_2} \n\n" \
          f"{schedule_img_msg_1} - {schedule_img_msg_2} \n\n" \
          f"{start_msg_1} - {start_msg_2} \n\n" \
          f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ ‚å®Ô∏è"

    await message.answer(msg, parse_mode=ParseMode.MARKDOWN,
                         reply_markup=choice)


@logger.catch
@dp.message_handler(commands=['download'])
async def parse_site(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /download
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é pars_img, –∫–æ—Ç–æ—Ä–∞—è –∫–∞—á–∞–µ—Ç
    —Ñ–æ—Ç–æ —Å —Å–∞–π—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–ø–∫–µ schedule
    """
    pars_img()
    cropped_img()
    msg = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ üëå \n" \
          "–ù–∞–ø–∏—à–∏ /photo –∏ —è –ø–µ—Ä–µ—à–ª—é —Ç–µ–±–µ –µ–≥–æ üì≤"
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN,
                         reply_markup=choice)


@logger.catch
@dp.message_handler(commands=['photo'])
async def photo_command(message: types.Message):
    """–û—Ç—Å—ã–ª–∞–µ—Ç —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        with open('schedule/schedule2.png', 'rb') as f:
            contents = f.read()
    except FileNotFoundError:
        logger.error("no png file")
        msg_error = "–£–ø—Å.. –£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üò± \n" \
                    "–ù–∞–ø–∏—à–∏: /download –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ üíæ\n" \
                    "–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - –°–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïπ"
        await message.answer(msg_error, parse_mode=ParseMode.MARKDOWN)

    msg = "A –≤–æ—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüëÜ\n–°–º–æ—Ç—Ä–∏ –º–Ω–µ! –ù–ï –ü–†–û–ì–£–õ–ò–í–ê–ô ü§°"
    await bot.send_photo(message.from_user.id, photo=contents)
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN)
    logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@logger.catch
@dp.callback_query_handler(text="cancel")
async def cancel_buying(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback = cancel
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    await call.answer("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", show_alert=True)
    await call.message.edit_reply_markup(reply_markup=None)


@logger.catch
@dp.callback_query_handler(text="download")
async def download_buying(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å callback = download
    –ü–∞—Ä—Å–∏—Ç –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    """
    pars_img()
    cropped_img()
    await call.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∞—á–∞–ª! \n"
                      "–ù–∞–∂–º–∏ –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É \n"
                      "–∏ —è —Å–∫–∏–Ω—É –µ–≥–æ —Ç–µ–±–µ üì©",
                      show_alert=True)


@logger.catch
@dp.callback_query_handler(text="schedule")
async def schedule_buying(call: CallbackQuery):
    try:
        with open('schedule/schedule2.png', 'rb') as f:
            contents = f.read()
    except FileNotFoundError:
        logger.error("no png file")
        msg_error = "–£–ø—Å.. –£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üò± \n" \
                    "–ù–∞–ø–∏—à–∏: /download –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ üíæ\n" \
                    "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ‚å®Ô∏è\n\n" \
                    "* –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ /start "
        await call.answer(msg_error, show_alert=True)

    msg = "–ê –≤–æ—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ü§°"
    await bot.send_photo(call.from_user.id, photo=contents)
    await call.answer(msg, show_alert=False)


@logger.catch
@dp.callback_query_handler(text="dev")
async def download_buying(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å callback = instruction
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
    """
    msg = f"{info_developer_msg_1}: \n\n{info_developer_msg_2}"
    await call.answer(msg, show_alert=True)


@logger.catch
@dp.message_handler()
async def user_registration(message: types.Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    user_name = message.from_user.username
    db_users_isp.add_data_db(user_id=user_id,
                             first_name=first_name,
                             last_name=last_name,
                             user_name=user_name)

    msg = f'{user_id}\n{first_name}\n{last_name}\n{user_name}'
    await message.answer(msg)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
