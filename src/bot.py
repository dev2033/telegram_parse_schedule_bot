"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from aiogram.utils.markdown import text, bold, italic, code

from my_logging import logger
from parser import pars_img
from messages import (
    download_sch_msg_1,
    download_sch_msg_2,
    schedule_img_msg_1,
    schedule_img_msg_2
)

API_TOKEN = os.getenv("NOMAD_BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@logger.catch
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    first_msg = text(bold("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è–Ω—á–∏–∫, "
                          "–Ω–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É"))

    await message.answer(first_msg, parse_mode=ParseMode.MARKDOWN)


@logger.catch
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É"""

    msg = f"{download_sch_msg_1} - {download_sch_msg_2} \n\n" \
          f"{schedule_img_msg_1} - {schedule_img_msg_2}"

    await message.answer(msg, parse_mode=ParseMode.MARKDOWN)


@logger.catch
@dp.message_handler(commands=['download'])
async def pars_site(message: types.Message):
    pars_img()
    msg = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ üëå \n" \
          "–ù–∞–ø–∏—à–∏ /photo –∏ —è –ø–µ—Ä–µ—à–ª—é —Ç–µ–±–µ –µ–≥–æ üì≤"
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN)


@logger.catch
@dp.message_handler(commands=['photo'])
async def photo_command(message: types.Message):
    """–û—Ç—Å—ã–ª–∞–µ—Ç —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        with open('schedule/schedule.png', 'rb') as f:
            contents = f.read()
    except FileNotFoundError:
        logger.error("no png file")
        msg_error = "–£–ø—Å.. –£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üò± \n" \
                    "–ù–∞–ø–∏—à–∏: /download –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ üíæ"
        await message.answer(msg_error, parse_mode=ParseMode.MARKDOWN)

    msg = "A –≤–æ—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüëÜ\n–°–º–æ—Ç—Ä–∏ –º–Ω–µ! –ù–ï –ü–†–û–ì–£–õ–ò–í–ê–ô ü§°"

    await bot.send_photo(message.from_user.id, photo=contents)
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
